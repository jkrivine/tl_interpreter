# On orphaned ledgers:
  After 

  ```
    u --K-- v --K'-- w
           Fv
        u --K'-- w
  ```

  The K segment (containing a provisioned ledger) is orphaned. In a
  real-world implementation, ledgers would be flat, that is: not
  contained in a segment but with its own id. Here for simplicity (?) I
  use the fact that the token v was also detached from the tradeline and
  I associate K to v. That way K can be gc'ed and there is a trace of
  that gc operation in the tradeline.

JK: isn't that problem a consequence of the fact you don't want GC to operate in an opportunistic manner but only on demand? Because otherwise you could just GC the whole segement after the Fv reduction

Also, there is no need to return a payoff after `reduce` (i.e. `reduce : ... (tradeline*payoff)` is not necessary and `reduce : ... -> tradeline` is sufficient) since even without an environment, the transferred provisions can stay in the segment's ledger.

JK: similar to the above point. If you GC on the fly you can compute the payoff immediately.

Also, there is no need to return a payoff after `reduce` (i.e. `reduce : ...
(tradeline*payoff)` is not necessary and `reduce : ... -> tradeline` is
sufficient) since even without an environment, the transferred provisions can
stay in the segment's ledger.

# Possible states for positions
  Next   Prev  Segment     Status

   ✔      ✗      ✔         source

   ✔      ✔      ✔         middle

   ✗      ✔      ✗         sink

   ✗      ✗      ✗         fresh if pos > tl.max_pos, unreachable if pos <= tl.max_pos

   ✗      ✗      ✔         gc-able / gc-ed

   ✗      ✔      ✔         unreachable

   ✔      ✔      ✗         unreachable

   ✔      ✗      ✗         unreachable
